- name: Deploy VictoriaMetrics on Debian hosts
  hosts: debian
  become: yes
  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker-ce
        state: present
        update_cache: yes
      vars:
        docker_ce_repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"

    - name: Ensure Docker compose is installed
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create Docker network
      docker_network:
        name: vm_net
        state: present

    - name: Create vmagent volume
      docker_volume:
        name: vmagentdata
        state: present

    - name: Deploy vmagent container
      docker_container:
        name: vmagent
        image: victoriametrics/vmagent:v1.109.1
        ports:
          - "8429:8429"
        volumes:
          - vmagentdata:/vmagentdata
          - ./prometheus.yml:/etc/prometheus/prometheus.yml
        command:
          - "--promscrape.config=/etc/prometheus/prometheus.yml"
          - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
        networks:
          - name: vm_net
        restart_policy: always
        state: started

    - name: Create vmdata volume
      docker_volume:
        name: vmdata
        state: present

    - name: Deploy VictoriaMetrics container
      docker_container:
        name: victoriametrics
        image: victoriametrics/victoria-metrics:v1.109.1
        ports:
          - "8428:8428"
          - "8089:8089"
          - "8089:8089/udp"
          - "2003:2003"
          - "2003:2003/udp"
          - "4242:4242"
        volumes:
          - vmdata:/storage
        command:
          - "--storageDataPath=/storage"
          - "--graphiteListenAddr=:2003"
          - "--opentsdbListenAddr=:4242"
          - "--httpListenAddr=:8428"
          - "--influxListenAddr=:8089"
          - "--vmalert.proxyURL=http://vmalert:8880"
        networks:
          - name: vm_net
        restart_policy: always
        state: started

    - name: Create grafanadata volume
      docker_volume:
        name: grafanadata
        state: present

    - name: Deploy Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana:10.4.2
        ports:
          - "3000:3000"
        volumes:
          - grafanadata:/var/lib/grafana
          - ./provisioning/datasources/prometheus-datasource/single.yml:/etc/grafana/provisioning/datasources/single.yml
          - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
          - ./../../dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
          - ./../../dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
          - ./../../dashboards/vmalert.json:/var/lib/grafana/dashboards/vmalert.json
        networks:
          - vm_net
        restart_policy: always
        state: started

    - name: Deploy vmalert container
      docker_container:
        name: vmalert
        image: victoriametrics/vmalert:v1.109.1
        ports:
          - "8880:8880"
        volumes:
          - ./rules/alerts.yml:/etc/alerts/alerts.yml
          - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
          - ./rules/alerts-vmagent.yml:/etc/alerts/alerts-vmagent.yml
          - ./rules/alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
        command:
          - "--datasource.url=http://victoriametrics:8428/"
          - "--remoteRead.url=http://victoriametrics:8428/"
          - "--remoteWrite.url=http://vmagent:8429/"
          - "--notifier.url=http://alertmanager:9093/"
          - "--rule=/etc/alerts/*.yml"
          # display source of alerts in grafana
          - "--external.url=http://127.0.0.1:3000" #grafana outside container
          - '--external.alert.source=explore?orgId=1&left={"datasource":"VictoriaMetrics","queries":[{"expr":{{.Expr|jsonEscape|queryEscape}},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}'
        networks:
          - name: vm_net
        restart_policy: always
        state: started

    - name: deploy alertmanager container
      docker_container:
        name: alertmanager
        image: prom/alertmanager:v0.27.0
        volumes:
          - ./alertmanager.yml:/config/alertmanager.yml
        command:
          - "--config.file=/config/alertmanager.yml"
        ports:
          - "9093:9093"
        networks:
          - name: vm_net
        restart_policy: always
        state: started
